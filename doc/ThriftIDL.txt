// Shamelessly copied from http://wiki.apache.org/thrift/ThriftIDL


 Document

Every Thrift document contains 0 or more headers followed by 0 or more definitions.

[1]  Document        ::=  Header* Definition*

Header

A header is either a Thrift include, a C++ include, or a namespace declaration.

[2]  Header          ::=  Include | CppInclude | Namespace

Thrift Include

An include makes all the symbols from another file visible (with a prefix) and adds corresponding include statements into the code generated for this Thrift document.

[3]  Include         ::=  'include' Literal

C++ Include

A C++ include adds a custom C++ include to the output of the C++ code generator for this Thrift document.

[4]  CppInclude      ::=  'cpp_include' Literal

Namespace

A namespace declares which namespaces/package/module/etc. the type definitions in this file will be declared in for the target languages. The namespace scope indicates which language the namespace applies to; a scope of '*' indicates that the namespace applies to all target languages.

[5]  Namespace       ::=  ( 'namespace' ( NamespaceScope Identifier ) |
                                        ( 'smalltalk.category' STIdentifier ) |
                                        ( 'smalltalk.prefix' Identifier ) ) |
                          ( 'php_namespace' Literal ) |
                          ( 'xsd_namespace' Literal )

[6]  NamespaceScope  ::=  '*' | 'cpp' | 'java' | 'py' | 'perl' | 'rb' | 'cocoa' | 'csharp'

NB: Smalltalk has two distinct types of namespace commands. Can someone who knows Smalltalk explain why Smalltalk needs two different kinds of namespaces?

NB: The php_namespace directive will be deprecated at some point in the future in favor of the scoped syntax, but the scoped syntax is not yet supported for PHP.

NB: The xsd_namespace directive has some purpose internal to Facebook but serves no purpose in Thrift itself. Use of this feature is strongly discouraged

Definition

[7]  Definition      ::=  Const | Typedef | Enum | Senum | Struct | Exception | Service

Const

[8]  Const           ::=  'const' FieldType Identifier '=' ConstValue ListSeparator?

Typedef

A typedef creates an alternate name for a type.

[9]  Typedef         ::=  'typedef' DefinitionType Identifier

Enum

An enum creates an enumerated type, with named values. If no constant value is supplied, the value is either 0 for the first element, or one greater than the preceding value for any subsequent element. Any constant value that is supplied must be non-negative.

[10] Enum            ::=  'enum' Identifier '{' (Identifier ('=' IntConstant)? ListSeparator?)* '}'

Senum

[11] Senum           ::=  'senum' Identifier '{' (Literal ListSeparator?)* '}'

Struct

Structs are the fundamental compositional type in Thrift. The name of each field must be unique within the struct.

[12] Struct          ::=  'struct' Identifier 'xsd_all'? '{' Field* '}'

NB: The xsd_all keyword has some purpose internal to Facebook but serves no purpose in Thrift itself. Use of this feature is strongly discouraged

Exception

Exceptions are similar to structs except that they are intended to integrate with the native exception handling mechanisms in the target languages. The name of each field must be unique within the exception.

[13] Exception       ::=  'exception' Identifier '{' Field* '}'

Service

A service provides the interface for a set of functionality provided by a Thrift server. The interface is simply a list of functions. A service can extend another service, which simply means that it provides the functions of the extended service in addition to its own.

[14] Service         ::=  'service' Identifier ( 'extends' Identifier )? '{' Function* '}'

Field

[15] Field           ::=  FieldID? FieldReq? FieldType Identifier ('= ConstValue)? XsdFieldOptions ListSeparator?

Field ID

[16] FieldID         ::=  IntConstant ':'

Field Requiredness

[17] FieldReq        ::=  'required' | 'optional'

XSD Options

NB: These have some internal purpose at Facebook but serve no current purpose in Thrift. Use of these options is strongly discouraged.

[18] XsdFieldOptions ::=  'xsd_optional'? 'xsd_nillable'? XsdAttrs?

[19] XsdAttrs        ::=  'xsd_attrs' '{' Field* '}'

Functions

[20] Function        ::=  'oneway'? FunctionType Identifier '(' Field* ')' Throws? ListSeparator?

[21] FunctionType    ::=  FieldType | 'void'

[22] Throws          ::=  'throws' '(' Field* ')'

Types

[23] FieldType       ::=  Identifier | BaseType | ContainerType

[24] DefinitionType  ::=  BaseType | ContainerType

[25] BaseType        ::=  'bool' | 'byte' | 'i16' | 'i32' | 'i64' | 'double' |
                            'string' | 'binary' | 'slist'

[26] ContainerType   ::=  MapType | SetType | ListType

[27] MapType         ::=  'map' CppType? '<' FieldType ',' FieldType '>'

[28] SetType         ::=  'set' CppType? '<' FieldType '>'

[29] ListType        ::=  'list' '<' FieldType '>' CppType?

[30] CppType         ::=  'cpp_type' Literal

Constant Values

[31] ConstValue      ::=  IntConstant | DoubleConstant | Literal | Identifier | ConstList | ConstMap

[32] IntConstant     ::=  ('+' | '-')? Digit+

[33] DoubleConstant  ::=  ('+' | '-')? Digit* ('.' Digit+)? ( ('E' | 'e') IntConstant )?

[34] ConstList       ::= '[' (ConstValue ListSeparator?)* ']'

[35] ConstMap        ::= '{' (ConstValue ':' ConstValue ListSeparator?)* '}'

Basic Definitions

Literal

[36] Literal         ::=  ('"' [^"]* '"') | ("'" [^']* "'")

Identifier

[37] Identifier      ::=  ( Letter | '_' ) ( Letter | Digit | '.' | '_' )*

[38] STIdentifier    ::=  ( Letter | '_' ) ( Letter | Digit | '.' | '_' | '-' )*

List Separator

[39] ListSeparator   ::=  ',' | ';'

Letters and Digits

[40] Letter          ::=  ['A'-'Z'] | ['a'-'z']

[41] Digit           ::=  ['0'-'9']